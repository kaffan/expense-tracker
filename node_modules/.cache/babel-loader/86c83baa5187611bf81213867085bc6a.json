{"ast":null,"code":"var _jsxFileName = \"/home/sony/Desktop/affan/expense-tracker/src/components/Expenses/Expenses.js\",\n    _s = $RefreshSig$();\n\nimport React from 'react';\nimport ExpenseItem from './ExpenseItem';\nimport './Expenses.css';\nimport Card from '../UI/Card';\nimport ExpensesFilter from './ExpensesFilter';\nimport { useState } from 'react/cjs/react.development';\nimport ExpenseChart from './ExpenseChart';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction Expenses(props) {\n  _s();\n\n  let [currYear, setCurrYear] = useState('2019');\n\n  const onDateChange = year => {\n    setCurrYear(year);\n    console.log(currYear);\n  }; // console.log(props.expenses);\n\n\n  const filteredExpenses = props.expenses.filter(ele => {\n    return ele.date.getFullYear().toString() === currYear;\n  }); // console.log(filteredExpenses);\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(Card, {\n      className: \"expenses\",\n      children: [/*#__PURE__*/_jsxDEV(ExpensesFilter, {\n        selected: currYear,\n        OnYearChange: onDateChange\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 26,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(ExpenseChart, {\n        expenses: filteredExpenses\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 30,\n        columnNumber: 11\n      }, this), filteredExpenses.length === 0 ? /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"expenses-list__fallback\",\n        children: \"No Expenses Found\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 32,\n        columnNumber: 13\n      }, this) : filteredExpenses.map(obj => /*#__PURE__*/_jsxDEV(ExpenseItem, {\n        //we add 'key' prop to any custom components or html elements in order\n        // for react to understand the elements of lists uniquely\n        // when we don't add this prop, then what react does is, it add new div element\n        // at the end of the list and updates the content inside the element, which is\n        // bad for performance and may lead to bugs.\n        title: obj.title,\n        amount: obj.amount,\n        date: obj.date\n      }, obj.id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 35,\n        columnNumber: 15\n      }, this))]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 25,\n      columnNumber: 9\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 24,\n    columnNumber: 7\n  }, this);\n}\n\n_s(Expenses, \"RMjUdBVwMGhOY1Bu3PQdSiKO6Mg=\");\n\n_c = Expenses;\nexport default Expenses;\n\nvar _c;\n\n$RefreshReg$(_c, \"Expenses\");","map":{"version":3,"sources":["/home/sony/Desktop/affan/expense-tracker/src/components/Expenses/Expenses.js"],"names":["React","ExpenseItem","Card","ExpensesFilter","useState","ExpenseChart","Expenses","props","currYear","setCurrYear","onDateChange","year","console","log","filteredExpenses","expenses","filter","ele","date","getFullYear","toString","length","map","obj","title","amount","id"],"mappings":";;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,WAAP,MAAwB,eAAxB;AACA,OAAO,gBAAP;AACA,OAAOC,IAAP,MAAiB,YAAjB;AACA,OAAOC,cAAP,MAA2B,kBAA3B;AACA,SAASC,QAAT,QAAyB,6BAAzB;AACA,OAAOC,YAAP,MAAyB,gBAAzB;;;AAEA,SAASC,QAAT,CAAkBC,KAAlB,EACA;AAAA;;AACI,MAAI,CAACC,QAAD,EAAWC,WAAX,IAA0BL,QAAQ,CAAC,MAAD,CAAtC;;AACA,QAAMM,YAAY,GAAIC,IAAD,IACrB;AACIF,IAAAA,WAAW,CAACE,IAAD,CAAX;AACAC,IAAAA,OAAO,CAACC,GAAR,CAAYL,QAAZ;AACH,GAJD,CAFJ,CAOI;;;AACA,QAAMM,gBAAgB,GAAGP,KAAK,CAACQ,QAAN,CAAeC,MAAf,CAAuBC,GAAD,IAC/C;AACE,WAAOA,GAAG,CAACC,IAAJ,CAASC,WAAT,GAAuBC,QAAvB,OAAsCZ,QAA7C;AACD,GAHwB,CAAzB,CARJ,CAYI;;AACA,sBACE;AAAA,2BACE,QAAC,IAAD;AAAM,MAAA,SAAS,EAAC,UAAhB;AAAA,8BACE,QAAC,cAAD;AACE,QAAA,QAAQ,EAAEA,QADZ;AAEE,QAAA,YAAY,EAAEE;AAFhB;AAAA;AAAA;AAAA;AAAA,cADF,eAKE,QAAC,YAAD;AAAc,QAAA,QAAQ,EAAEI;AAAxB;AAAA;AAAA;AAAA;AAAA,cALF,EAMGA,gBAAgB,CAACO,MAAjB,KAA4B,CAA5B,gBACC;AAAG,QAAA,SAAS,EAAC,yBAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cADD,GAGCP,gBAAgB,CAACQ,GAAjB,CAAsBC,GAAD,iBACnB,QAAC,WAAD;AAEE;AACA;AACA;AACA;AACA;AACA,QAAA,KAAK,EAAEA,GAAG,CAACC,KAPb;AAQE,QAAA,MAAM,EAAED,GAAG,CAACE,MARd;AASE,QAAA,IAAI,EAAEF,GAAG,CAACL;AATZ,SACOK,GAAG,CAACG,EADX;AAAA;AAAA;AAAA;AAAA,cADF,CATJ;AAAA;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,UADF;AA4BH;;GA1CQpB,Q;;KAAAA,Q;AA4CT,eAAeA,QAAf","sourcesContent":["import React from 'react';\nimport ExpenseItem from './ExpenseItem';\nimport './Expenses.css';\nimport Card from '../UI/Card';\nimport ExpensesFilter from './ExpensesFilter';\nimport { useState } from 'react/cjs/react.development';\nimport ExpenseChart from './ExpenseChart';\n\nfunction Expenses(props)\n{\n    let [currYear, setCurrYear] = useState('2019');\n    const onDateChange = (year) =>\n    {\n        setCurrYear(year);\n        console.log(currYear);\n    }\n    // console.log(props.expenses);\n    const filteredExpenses = props.expenses.filter((ele)=>\n    {\n      return ele.date.getFullYear().toString() === currYear;\n    });\n    // console.log(filteredExpenses);\n    return (\n      <div>\n        <Card className=\"expenses\">\n          <ExpensesFilter\n            selected={currYear}\n            OnYearChange={onDateChange}\n          ></ExpensesFilter>\n          <ExpenseChart expenses={filteredExpenses}></ExpenseChart>\n          {filteredExpenses.length === 0 ? (\n            <p className=\"expenses-list__fallback\">No Expenses Found</p>\n          ) : (\n            filteredExpenses.map((obj) => (\n              <ExpenseItem\n                key={obj.id}\n                //we add 'key' prop to any custom components or html elements in order\n                // for react to understand the elements of lists uniquely\n                // when we don't add this prop, then what react does is, it add new div element\n                // at the end of the list and updates the content inside the element, which is\n                // bad for performance and may lead to bugs.\n                title={obj.title}\n                amount={obj.amount}\n                date={obj.date}\n              ></ExpenseItem>\n            ))\n          )}\n        </Card>\n      </div>\n    );\n}\n\nexport default Expenses;"]},"metadata":{},"sourceType":"module"}