{"ast":null,"code":"var _jsxFileName = \"/home/sony/Desktop/affan/reactjs-folder/first_project/src/components/NewExpense/ExpenseForm.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from 'react';\nimport FormElement from './FormElement';\nimport './ExpenseForm.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction ExpenseForm(props) {\n  _s();\n\n  const [title, setTitleChange] = useState('');\n  const [amnt, setAmntChange] = useState('');\n  const [date, setDate] = useState('');\n  let [swit, setSwitch] = useState(0); // using only one state for all 3 variables\n  // const [formVar, setFormChange] = useState(\n  //   {\n  //     title: '',\n  //     amnt: '',\n  //     date: ''\n  //   }\n  // );\n  // the state change functions like 'setFormChange' do not immediately change the value of the \n  // associated state variable, rather react schedules the state variables for update\n  // so when we have multiple states and those states depend on previous states \n  // so if we change or update the state variable like below then it may happen that\n  // previous state's value is still not updated and current state value gets updated\n  // that will make our app jumbled up.\n  // so we call an arrow function inside the state change function\n  // const titleChangeHandler = (event) =>\n  // {\n  //     //formVar.title = event.target.value;\n  //     setFormChange((prevState)=>\n  //     {\n  //       return {\n  //         ...formVar, title : event.target.value\n  //       }\n  //     });\n  //     console.log(formVar);\n  // }\n  // const amntChangeHandler = (event) =>\n  // {\n  //   setFormChange((prevState)=>\n  //     {\n  //       return {\n  //         ...formVar, amnt : event.target.value\n  //       }\n  //     });\n  //     console.log(formVar);\n  // }\n  // const dateChangeHandler = (event) =>\n  // {\n  //   setFormChange((prevState)=>\n  //   {\n  //     return {\n  //       ...formVar, date : event.target.value\n  //     }\n  //   });\n  //   console.log(formVar);\n  // }\n\n  const titleChangeHandler = event => {\n    setTitleChange(event.target.value);\n    console.log(event.target.value);\n  };\n\n  const amntChangeHandler = event => {\n    setAmntChange(event.target.value);\n    console.log(event.target.value);\n  };\n\n  const dateChangeHandler = event => {\n    setDate(event.target.value);\n    console.log(event.target.value);\n  };\n\n  const whenExpenseSaved = obj => {\n    props.addNewExpense(obj);\n  };\n\n  const SubmitHandler = e => {\n    e.preventDefault();\n    const obj = {\n      title: title,\n      amount: amnt,\n      date: new Date(date)\n    };\n    whenExpenseSaved(obj);\n    setTitleChange('');\n    setAmntChange('');\n    setDate('');\n  }; // const CancelButtonHandler = () =>\n  // {\n  // }\n\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: swit ? /*#__PURE__*/_jsxDEV(FormElement, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 96,\n      columnNumber: 20\n    }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"new-expense__actions\",\n      children: /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"new-expense__actions\",\n        children: \"Add New Expense\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 97,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 96,\n      columnNumber: 38\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 95,\n    columnNumber: 7\n  }, this);\n}\n\n_s(ExpenseForm, \"pXV2ZqGHc5nHJViMmxr2wsEQ0fE=\");\n\n_c = ExpenseForm;\nexport default ExpenseForm;\n\nvar _c;\n\n$RefreshReg$(_c, \"ExpenseForm\");","map":{"version":3,"sources":["/home/sony/Desktop/affan/reactjs-folder/first_project/src/components/NewExpense/ExpenseForm.js"],"names":["React","useState","FormElement","ExpenseForm","props","title","setTitleChange","amnt","setAmntChange","date","setDate","swit","setSwitch","titleChangeHandler","event","target","value","console","log","amntChangeHandler","dateChangeHandler","whenExpenseSaved","obj","addNewExpense","SubmitHandler","e","preventDefault","amount","Date"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;AACA,OAAOC,WAAP,MAAwB,eAAxB;AACA,OAAO,mBAAP;;;AAEA,SAASC,WAAT,CAAqBC,KAArB,EACA;AAAA;;AACI,QAAM,CAACC,KAAD,EAAQC,cAAR,IAA0BL,QAAQ,CAAC,EAAD,CAAxC;AACA,QAAM,CAACM,IAAD,EAAOC,aAAP,IAAwBP,QAAQ,CAAC,EAAD,CAAtC;AACA,QAAM,CAACQ,IAAD,EAAOC,OAAP,IAAkBT,QAAQ,CAAC,EAAD,CAAhC;AACA,MAAI,CAACU,IAAD,EAAOC,SAAP,IAAoBX,QAAQ,CAAC,CAAD,CAAhC,CAJJ,CAKI;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,QAAMY,kBAAkB,GAAIC,KAAD,IAC3B;AACIR,IAAAA,cAAc,CAACQ,KAAK,CAACC,MAAN,CAAaC,KAAd,CAAd;AACAC,IAAAA,OAAO,CAACC,GAAR,CAAYJ,KAAK,CAACC,MAAN,CAAaC,KAAzB;AACH,GAJD;;AAKA,QAAMG,iBAAiB,GAAIL,KAAD,IAC1B;AACEN,IAAAA,aAAa,CAACM,KAAK,CAACC,MAAN,CAAaC,KAAd,CAAb;AACAC,IAAAA,OAAO,CAACC,GAAR,CAAYJ,KAAK,CAACC,MAAN,CAAaC,KAAzB;AACD,GAJD;;AAKA,QAAMI,iBAAiB,GAAIN,KAAD,IAC1B;AACIJ,IAAAA,OAAO,CAACI,KAAK,CAACC,MAAN,CAAaC,KAAd,CAAP;AACAC,IAAAA,OAAO,CAACC,GAAR,CAAYJ,KAAK,CAACC,MAAN,CAAaC,KAAzB;AACH,GAJD;;AAKA,QAAMK,gBAAgB,GAAIC,GAAD,IACzB;AACElB,IAAAA,KAAK,CAACmB,aAAN,CAAoBD,GAApB;AACD,GAHD;;AAIA,QAAME,aAAa,GAAIC,CAAD,IACtB;AACEA,IAAAA,CAAC,CAACC,cAAF;AACA,UAAMJ,GAAG,GAAG;AACVjB,MAAAA,KAAK,EAAEA,KADG;AAEVsB,MAAAA,MAAM,EAAEpB,IAFE;AAGVE,MAAAA,IAAI,EAAE,IAAImB,IAAJ,CAASnB,IAAT;AAHI,KAAZ;AAKAY,IAAAA,gBAAgB,CAACC,GAAD,CAAhB;AACAhB,IAAAA,cAAc,CAAC,EAAD,CAAd;AACAE,IAAAA,aAAa,CAAC,EAAD,CAAb;AACAE,IAAAA,OAAO,CAAC,EAAD,CAAP;AACD,GAZD,CAvEJ,CAoFI;AACA;AAEA;;;AACA,sBACE;AAAA,cACKC,IAAD,gBAAS,QAAC,WAAD;AAAA;AAAA;AAAA;AAAA,YAAT,gBAA2B;AAAK,MAAA,SAAS,EAAC,sBAAf;AAAA,6BAC7B;AAAQ,QAAA,SAAS,EAAC,sBAAlB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAD6B;AAAA;AAAA;AAAA;AAAA;AAD/B;AAAA;AAAA;AAAA;AAAA,UADF;AAOH;;GAhGQR,W;;KAAAA,W;AAkGT,eAAeA,WAAf","sourcesContent":["import React, { useState } from 'react';\nimport FormElement from './FormElement';\nimport './ExpenseForm.css';\n\nfunction ExpenseForm(props)\n{\n    const [title, setTitleChange] = useState('');\n    const [amnt, setAmntChange] = useState('');\n    const [date, setDate] = useState('');\n    let [swit, setSwitch] = useState(0);\n    // using only one state for all 3 variables\n    // const [formVar, setFormChange] = useState(\n    //   {\n    //     title: '',\n    //     amnt: '',\n    //     date: ''\n    //   }\n    // );\n    // the state change functions like 'setFormChange' do not immediately change the value of the \n    // associated state variable, rather react schedules the state variables for update\n    // so when we have multiple states and those states depend on previous states \n    // so if we change or update the state variable like below then it may happen that\n    // previous state's value is still not updated and current state value gets updated\n    // that will make our app jumbled up.\n    // so we call an arrow function inside the state change function\n\n    // const titleChangeHandler = (event) =>\n    // {\n    //     //formVar.title = event.target.value;\n    //     setFormChange((prevState)=>\n    //     {\n    //       return {\n    //         ...formVar, title : event.target.value\n    //       }\n    //     });\n    //     console.log(formVar);\n    // }\n    // const amntChangeHandler = (event) =>\n    // {\n    //   setFormChange((prevState)=>\n    //     {\n    //       return {\n    //         ...formVar, amnt : event.target.value\n    //       }\n    //     });\n    //     console.log(formVar);\n    // }\n    // const dateChangeHandler = (event) =>\n    // {\n    //   setFormChange((prevState)=>\n    //   {\n    //     return {\n    //       ...formVar, date : event.target.value\n    //     }\n    //   });\n    //   console.log(formVar);\n    // }\n    const titleChangeHandler = (event) =>\n    {\n        setTitleChange(event.target.value);\n        console.log(event.target.value);\n    }\n    const amntChangeHandler = (event) =>\n    {\n      setAmntChange(event.target.value);\n      console.log(event.target.value);\n    }\n    const dateChangeHandler = (event) =>\n    {\n        setDate(event.target.value);\n        console.log(event.target.value);\n    }\n    const whenExpenseSaved = (obj) =>\n    {\n      props.addNewExpense(obj);\n    }\n    const SubmitHandler = (e) =>\n    {\n      e.preventDefault();\n      const obj = {\n        title: title,\n        amount: amnt,\n        date: new Date(date)\n      }\n      whenExpenseSaved(obj);\n      setTitleChange('');\n      setAmntChange('');\n      setDate('');\n    }\n    // const CancelButtonHandler = () =>\n    // {\n\n    // }\n    return (\n      <div>\n        { (swit) ? <FormElement /> : <div className=\"new-expense__actions\">\n        <button className='new-expense__actions'>Add New Expense</button>\n          </div> }\n      </div>\n    );\n}\n\nexport default ExpenseForm;"]},"metadata":{},"sourceType":"module"}