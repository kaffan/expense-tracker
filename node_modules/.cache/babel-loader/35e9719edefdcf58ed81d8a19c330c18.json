{"ast":null,"code":"var _jsxFileName = \"/home/sony/Desktop/affan/expense-tracker/src/components/NewExpense/ExpenseForm.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport FormElement from './FormElement';\nimport './ExpenseForm.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction ExpenseForm(props) {\n  _s();\n  const [title, setTitleChange] = useState('');\n  const [amnt, setAmntChange] = useState('');\n  const [date, setDate] = useState('');\n  let [swit, setSwitch] = useState(0);\n  // using only one state for all 3 variables\n  // const [formVar, setFormChange] = useState(\n  //   {\n  //     title: '',\n  //     amnt: '',\n  //     date: ''\n  //   }\n  // );\n  // the state change functions like 'setFormChange' do not immediately change the value of the \n  // associated state variable, rather react schedules the state variables for update\n  // so when we have multiple states and those states depend on previous states \n  // so if we change or update the state variable like below then it may happen that\n  // previous state's value is still not updated and current state value gets updated\n  // that will make our app jumbled up.\n  // so we call an arrow function inside the state change function\n\n  // const titleChangeHandler = (event) =>\n  // {\n  //     //formVar.title = event.target.value;\n  //     setFormChange((prevState)=>\n  //     {\n  //       return {\n  //         ...formVar, title : event.target.value\n  //       }\n  //     });\n  //     console.log(formVar);\n  // }\n  // const amntChangeHandler = (event) =>\n  // {\n  //   setFormChange((prevState)=>\n  //     {\n  //       return {\n  //         ...formVar, amnt : event.target.value\n  //       }\n  //     });\n  //     console.log(formVar);\n  // }\n  // const dateChangeHandler = (event) =>\n  // {\n  //   setFormChange((prevState)=>\n  //   {\n  //     return {\n  //       ...formVar, date : event.target.value\n  //     }\n  //   });\n  //   console.log(formVar);\n  // }\n  const titleChangeHandler = event => {\n    setTitleChange(event.target.value);\n    console.log(event.target.value);\n  };\n  const amntChangeHandler = event => {\n    setAmntChange(event.target.value);\n    console.log(event.target.value);\n  };\n  const dateChangeHandler = event => {\n    setDate(event.target.value);\n    console.log(event.target.value);\n  };\n  const whenExpenseSaved = obj => {\n    props.addNewExpense(obj);\n  };\n  const SubmitHandler = e => {\n    e.preventDefault();\n    const obj = {\n      title: title,\n      amount: +amnt,\n      date: new Date(date)\n    };\n    // console.log(obj.date);\n    whenExpenseSaved(obj);\n    setTitleChange('');\n    setAmntChange('');\n    setDate('');\n  };\n  const CancelButtonHandler = () => setSwitch(0);\n  const clickHandler = () => setSwitch(1);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: swit ? /*#__PURE__*/_jsxDEV(FormElement, {\n      SubmitF: SubmitHandler,\n      titleH: titleChangeHandler,\n      amntC: amntChangeHandler,\n      dateC: dateChangeHandler,\n      Cancel: CancelButtonHandler,\n      title: title,\n      amnt: amnt,\n      date: date\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 97,\n      columnNumber: 11\n    }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"new-expense__actions\",\n      children: /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: clickHandler,\n        children: \"Add New Expense\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 109,\n        columnNumber: 13\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 108,\n      columnNumber: 11\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 95,\n    columnNumber: 7\n  }, this);\n}\n_s(ExpenseForm, \"pXV2ZqGHc5nHJViMmxr2wsEQ0fE=\");\n_c = ExpenseForm;\nexport default ExpenseForm;\nvar _c;\n$RefreshReg$(_c, \"ExpenseForm\");","map":{"version":3,"names":["React","useState","FormElement","ExpenseForm","props","title","setTitleChange","amnt","setAmntChange","date","setDate","swit","setSwitch","titleChangeHandler","event","target","value","console","log","amntChangeHandler","dateChangeHandler","whenExpenseSaved","obj","addNewExpense","SubmitHandler","e","preventDefault","amount","Date","CancelButtonHandler","clickHandler"],"sources":["/home/sony/Desktop/affan/expense-tracker/src/components/NewExpense/ExpenseForm.js"],"sourcesContent":["import React, { useState } from 'react';\nimport FormElement from './FormElement';\nimport './ExpenseForm.css';\n\nfunction ExpenseForm(props)\n{\n    const [title, setTitleChange] = useState('');\n    const [amnt, setAmntChange] = useState('');\n    const [date, setDate] = useState('');\n    let [swit, setSwitch] = useState(0);\n    // using only one state for all 3 variables\n    // const [formVar, setFormChange] = useState(\n    //   {\n    //     title: '',\n    //     amnt: '',\n    //     date: ''\n    //   }\n    // );\n    // the state change functions like 'setFormChange' do not immediately change the value of the \n    // associated state variable, rather react schedules the state variables for update\n    // so when we have multiple states and those states depend on previous states \n    // so if we change or update the state variable like below then it may happen that\n    // previous state's value is still not updated and current state value gets updated\n    // that will make our app jumbled up.\n    // so we call an arrow function inside the state change function\n\n    // const titleChangeHandler = (event) =>\n    // {\n    //     //formVar.title = event.target.value;\n    //     setFormChange((prevState)=>\n    //     {\n    //       return {\n    //         ...formVar, title : event.target.value\n    //       }\n    //     });\n    //     console.log(formVar);\n    // }\n    // const amntChangeHandler = (event) =>\n    // {\n    //   setFormChange((prevState)=>\n    //     {\n    //       return {\n    //         ...formVar, amnt : event.target.value\n    //       }\n    //     });\n    //     console.log(formVar);\n    // }\n    // const dateChangeHandler = (event) =>\n    // {\n    //   setFormChange((prevState)=>\n    //   {\n    //     return {\n    //       ...formVar, date : event.target.value\n    //     }\n    //   });\n    //   console.log(formVar);\n    // }\n    const titleChangeHandler = (event) =>\n    {\n        setTitleChange(event.target.value);\n        console.log(event.target.value);\n    }\n    const amntChangeHandler = (event) =>\n    {\n      setAmntChange(event.target.value);\n      console.log(event.target.value);\n    }\n    const dateChangeHandler = (event) =>\n    {\n        setDate(event.target.value);\n        console.log(event.target.value);\n    }\n    const whenExpenseSaved = (obj) =>\n    {\n      props.addNewExpense(obj);\n    }\n    const SubmitHandler = (e) =>\n    {\n      e.preventDefault();\n      const obj = {\n        title: title,\n        amount: +amnt,\n        date: new Date(date)\n      }\n      // console.log(obj.date);\n      whenExpenseSaved(obj);\n      setTitleChange('');\n      setAmntChange('');\n      setDate('');\n    }\n    const CancelButtonHandler = () => setSwitch(0);\n    const clickHandler = () => setSwitch(1);\n\n    return (\n      <div>\n        {(swit) ? (\n          <FormElement\n            SubmitF={SubmitHandler}\n            titleH={titleChangeHandler}\n            amntC={amntChangeHandler}\n            dateC={dateChangeHandler}\n            Cancel={CancelButtonHandler}\n            title={title}\n            amnt={amnt}\n            date={date}\n          />\n        ) : (\n          <div className=\"new-expense__actions\">\n            <button onClick={clickHandler}>\n              Add New Expense\n            </button>\n          </div>\n        )}\n      </div>\n    );\n}\n\nexport default ExpenseForm;"],"mappings":"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"},"metadata":{},"sourceType":"module"}